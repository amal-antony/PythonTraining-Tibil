{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Times New Roman;}{\f1\fnil\fcharset1 Cambria Math;}{\f2\fnil\fcharset0 Cambria Math;}{\f3\fnil\fcharset0 Calibri;}{\f4\fnil Times New Roman;}{\f5\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.19041}{\*\mmathPr\mmathFont1\mwrapIndent1440 }\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\ul\f0\fs48\lang9 Python Baiscs -1\par

\pard\sa200\sl276\slmult1\b\fs32 1.Python Overview\b0\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\ulnone\fs26 Python is a high-level, interpreted, interactive and object-oriented scripting language.\par
{\pntext\f5\'B7\tab}Python is Interpreted \f1\u8722?\f0  Python is processed at runtime by the interpreter. We do not need to compile our program before executing it. \par
{\pntext\f5\'B7\tab}Python is Interactive \f1\u8722?\f0  Open a Python prompt and interact with the interpreter directly to write our programs.\par
{\pntext\f5\'B7\tab}Python is Object-Oriented \f1\u8722?\f0  Python supports Object-Oriented style or technique of programming that encapsulates code within object.\par
{\pntext\f5\'B7\tab}Dynamically typed-We as a developer doesnt have to declare the type of a variable in advance to use it. This isnt the case with Java or C++ where we have to specify the type of varibale followed by variable name and then assigned a value.For eg : In Java to define an integer with value 10 we should use int a=10 , whereas in python a=10 will do the work.\par

\pard\sa200\sl276\slmult1\ul\fs32\par
\b 2.Features of Python\ulnone\b0\fs26\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\f2     \f0 Easy\f2 -\f0 to\f2 -\f0 learn\f2  \f1\u8722?\f2  \f0 Python\f2  \f0 has\f2  \f0 few\f2  \f0 keywords\f2 , \f0 simple\f2  \f0 structure\f2 , \f0 and\f2  \f0 a\f2  \f0 clearly\f2  \f0 defined\f2  \f0 syntax\f2 . \f0 This\f2  \f0 allows\f2  \f0 the\f2  \f0 student\f2  \f0 to\f2  \f0 pick\f2  \f0 up\f2  \f0 the\f2  \f0 language\f2  \f0 quickly\f2 .\f0\par
{\pntext\f5\'B7\tab}\f2     \f0 Easy\f2 -\f0 to\f2 -\f0 read\f2  \f1\u8722?\f2  \f0 Python\f2  \f0 code\f2  \f0 is\f2  \f0 more\f2  \f0 clearly\f2  \f0 defined\f2  \f0 and\f2  \f0 visible\f2  \f0 to\f2  \f0 the\f2  \f0 eyes\f2 .\f0\par
{\pntext\f5\'B7\tab}\f2     \f0 Easy\f2 -\f0 to\f2 -\f0 maintain\f2  \f1\u8722?\f2  \f0 Python's\f2  \f0 source\f2  \f0 code\f2  \f0 is\f2  \f0 fairly\f2  \f0 easy\f2 -\f0 to\f2 -\f0 maintain\f2 .\f0\par
{\pntext\f5\'B7\tab}\f2     \f0 A\f2  \f0 broad\f2  \f0 standard\f2  \f0 library\f2  \f1\u8722?\f2  \f0 Python's\f2  \f0 bulk\f2  \f0 of\f2  \f0 the\f2  \f0 library\f2  \f0 is\f2  \f0 very\f2  \f0 portable\f2  \f0 and\f2  \f0 cross\f2 -\f0 platform\f2  \f0 compatible\f2  \f0 on\f2  \f0 UNIX\f2 , \f0 Windows\f2 , \f0 and\f2  \f0 Mac.\par
{\pntext\f5\'B7\tab}\f2     \f0 Interactive\f2  \f0 Mode\f2  \f1\u8722?\f2  \f0 Python\f2  \f0 has\f2  \f0 support\f2  \f0 for\f2  \f0 an\f2  \f0 interactive\f2  \f0 mode\f2  \f0 which\f2  \f0 allows\f2  \f0 interactive\f2  \f0 testing\f2  \f0 and\f2  \f0 debugging\f2  \f0 of\f2  \f0 snippets\f2  \f0 of\f2  \f0 code\f2 .\f0\par
{\pntext\f5\'B7\tab}\f2     \f0 Portable\f2  \f1\u8722?\f2  \f0 Python\f2  \f0 can\f2  \f0 run\f2  \f0 on\f2  \f0 a\f2  \f0 wide\f2  \f0 variety\f2  \f0 of\f2  \f0 hardware\f2  \f0 platforms\f2  \f0 and\f2  \f0 has\f2  \f0 the\f2  \f0 same\f2  \f0 interface\f2  \f0 on\f2  \f0 all\f2  \f0 platforms\f2 .\f0\par
{\pntext\f5\'B7\tab}\f2     \f0 Extendable\f2  \f1\u8722?\f2  \f0 You\f2  \f0 can\f2  \f0 add\f2  \f0 low\f2 -\f0 level\f2  \f0 modules\f2  \f0 to\f2  \f0 the\f2  \f0 Python\f2  \f0 interpreter\f2 . \f0 These\f2  \f0 modules\f2  \f0 enable\f2  \f0 programmers\f2  \f0 to\f2  \f0 add\f2  \f0 to\f2  \f0 or\f2  \f0 customize\f2  \f0 their\f2  \f0 tools\f2  \f0 to\f2  \f0 be\f2  \f0 more\f2  \f0 efficient\f2 .\f0\par
{\pntext\f5\'B7\tab}\f2     \f0 Databases\f2  \f1\u8722?\f2  \f0 Python\f2  \f0 provides\f2  \f0 interfaces\f2  \f0 to\f2  \f0 all\f2  \f0 major\f2  \f0 commercial\f2  \f0 databases\f2 .\f0\par
{\pntext\f5\'B7\tab}\f2     \f0 GUI\f2  \f0 Programming\f2  \f1\u8722?\f2  \f0 Python\f2  \f0 supports\f2  \f0 GUI\f2  \f0 applications\f2  \f0 that\f2  \f0 can\f2  \f0 be\f2  \f0 created\f2  \f0 and\f2  \f0 ported\f2  \f0 to\f2  \f0 many\f2  \f0 system\f2  \f0 calls\f2 , \f0 libraries\f2  \f0 and\f2  \f0 windows\f2  \f0 systems\f2 , \f0 such\f2  \f0 as\f2  \f0 Windows\f2  \f0 MFC\f2 , \f0 Macintosh\f2 , \f0 and\f2  \f0 the\f2  \f0 X\f2  \f0 Window\f2  \f0 system\f2  \f0 of\f2  \f0 Unix\f2 .\f0\par
{\pntext\f5\'B7\tab}\f2     \f0 Scalable\f2  \f1\u8722?\f2  \f0 Python\f2  \f0 provides\f2  \f0 a\f2  \f0 better\f2  \f0 structure\f2  \f0 and\f2  \f0 support\f2  \f0 for\f2  \f0 large\f2  \f0 programs\f2  \f0 than\f2  \f0 shell\f2  \f0 scripting\f2 .\f0\par
{\pntext\f5\'B7\tab}\f2     \f0 It\f2  \f0 supports\f2  \f0 functional\f2  \f0 and\f2  \f0 structured\f2  \f0 programming\f2  \f0 methods\f2  \f0 as\f2  \f0 well\f2  \f0 as\f2  \f0 OOP\f2 .\f0\par
{\pntext\f5\'B7\tab}\f2     \f0 It\f2  \f0 can\f2  \f0 be\f2  \f0 used\f2  \f0 as\f2  \f0 a\f2  \f0 scripting\f2  \f0 language\f2  \f0 or\f2  \f0 can\f2  \f0 be\f2  \f0 compiled\f2  \f0 to\f2  \f0 byte\f2 -\f0 code\f2  \f0 for\f2  \f0 building\f2  \f0 large\f2  \f0 applications\f2 .\f0\par
{\pntext\f5\'B7\tab}\f2     \f0 It\f2  \f0 provides\f2  \f0 very\f2  \f0 high\f2 -\f0 level\f2  \f0 dynamic\f2  \f0 data\f2  \f0 types\f2  \f0 and\f2  \f0 supports\f2  \f0 dynamic\f2  \f0 type\f2  \f0 checking\f2 .\f0\par
{\pntext\f5\'B7\tab}\f2     \f0 It\f2  \f0 supports\f2  \f0 automatic\f2  \f0 garbage\f2  \f0 collection\f2 .\f0\par
{\pntext\f5\'B7\tab}\f2     \f0 It\f2  \f0 can\f2  \f0 be\f2  \f0 easily\f2  \f0 integrated\f2  \f0 with\f2  \f0 C\f2 , \f0 C\f2 ++ \f0 and\f2  \f0 Java\f2 .\f3\fs22\lang9\par

\pard\sa200\sl276\slmult1\b\fs32\par
\ul\f0 3.Applications of Python\ulnone\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0\f2\fs28  \f0\fs26 Web\f2  \f0 Development\par
{\pntext\f5\'B7\tab}Game\f2  \f0 Development\par
{\pntext\f5\'B7\tab}\f2  \f0 Scientific\f2  \f0 and\f2  \f0 Numeric\f2  \f0 Applications\par
{\pntext\f5\'B7\tab}Artificial\f2  \f0 Intelligence\f2  \f0 and\f2  \f0 Machine\f2  \f0 Learning\f2  \f0\par
{\pntext\f5\'B7\tab}Desktop\f2  \f0 GUI\par
{\pntext\f5\'B7\tab}Software\f2  \f0 Development\par
{\pntext\f5\'B7\tab}Enterprise\f2 -\f0 level\f2 /\f0 Business\f2  \f0 Applications\par
{\pntext\f5\'B7\tab}Education\f2  \f0 programs\f2  \f0 and\f2  \f0 training\f2  \f0 courses\par
{\pntext\f5\'B7\tab}Language\f2  \f0 Development\par
{\pntext\f5\'B7\tab}\f2  \f0 Operating\f2  \f0 Systems\par
{\pntext\f5\'B7\tab}\f2  \f0 Web\f2  \f0 Scraping\f2  \f0 Applications\par
{\pntext\f5\'B7\tab}Image\f2  \f0 Processing\f2  \f0 and\f2  \f0 Graphic\f2  \f0 Design\f2  \f0 Applications\f3\lang9\par

\pard\sa200\sl276\slmult1\b\fs32\par
\ul\f2 4.Limitations of Python\par
\b0\fs26\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1  Slow Speed\ulnone\par

\pard\sa200\sl276\slmult1 Python is an interpreted language and dynamically-typed language. The line by line execution of code often leads to slow execution.The dynamic nature of Python is also responsible for the slow speed of Python because it has to do the extra work while executing code. So, Python is not used for purposes where speed is an important aspect of the project.\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1  \ul Not Memory Efficient\ulnone\par

\pard\sa200\sl276\slmult1 The Python programming language uses a large amount of memory. This can be a disadvantage while building applications when we prefer memory optimization.\par
\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\ul Weak in Mobile Computing\ulnone\par

\pard\sa200\sl276\slmult1 Python is generally used in server-side programming. We don\rquote t get to see Python on the client-side or mobile applications because of the following reasons. Python is not memory efficient and it has slow processing power as compared to other languages.\par
\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1  \ul Database Access\ulnone\par

\pard\sa200\sl276\slmult1 Python is easy and stress-free. But when we are interacting with the database, it lacks behind.The Python\rquote s database access layer is primitive and underdeveloped in comparison to the popular technologies like JDBC or Java Database Connectors.Huge enterprises need smooth interaction of complex legacy data and Python is thus rarely used in enterprises.\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1  \ul Runtime Errors\ulnone\par

\pard\sa200\sl276\slmult1 As we know Python is a dynamically typed language so the data type of a variable can change anytime. A variable containing integer number may hold a string in the future, which can lead to Runtime Errors.Therefore Python programmers need to perform thorough testing of the applications.\par
\par
\ul\b\fs32 5.Keywords in Python\par
\ulnone\b0\fs26 Python has a set of keywords that are reserved words that cannot be used as variable names, function names, or any other identifiers:\par

\pard\sa200\sl276\slmult1 Some most popular keywords and respective\tab description below\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 and-A logical operator\par
{\pntext\f5\'B7\tab}as-To create an alias\par
{\pntext\f5\'B7\tab}assert-For debugging\par
{\pntext\f5\'B7\tab}break-To break out of a loop\par
{\pntext\f5\'B7\tab}class-To define a class\par
{\pntext\f5\'B7\tab}continue-To continue to the next iteration of a loop\par
{\pntext\f5\'B7\tab}def-To define a function\par
{\pntext\f5\'B7\tab}del-To delete an object\par
{\pntext\f5\'B7\tab}elif-Used in conditional statements, same as else if\par
{\pntext\f5\'B7\tab}else-Used in conditional statements\par
{\pntext\f5\'B7\tab}except-Used with exceptions, what to do when an exception occurs\par
{\pntext\f5\'B7\tab}False-Boolean value, result of comparison operations\par
{\pntext\f5\'B7\tab}finally-Used with exceptions, a block of code that will be executed no matter if there is an exception or not\par
{\pntext\f5\'B7\tab}for-To create a for loop\par
{\pntext\f5\'B7\tab}from-To import specific parts of a module\par
{\pntext\f5\'B7\tab}global-To declare a global variable\par
{\pntext\f5\'B7\tab}if-To make a conditional statement\par
{\pntext\f5\'B7\tab}import-To import a module\par
{\pntext\f5\'B7\tab}in-To check if a value is present in a list, tuple, etc.\par
{\pntext\f5\'B7\tab}is-To test if two variables are equal\par
{\pntext\f5\'B7\tab}lambda-To create an anonymous function\par
{\pntext\f5\'B7\tab}None-Represents a null value\par
{\pntext\f5\'B7\tab}nonlocal-To declare a non-local variable\par
{\pntext\f5\'B7\tab}not-A logical operator\par
{\pntext\f5\'B7\tab}or-A logical operator\par
{\pntext\f5\'B7\tab}pass-A null statement, a statement that will do nothing\par
{\pntext\f5\'B7\tab}raise-To raise an exception\par
{\pntext\f5\'B7\tab}return-To exit a function and return a value\par
{\pntext\f5\'B7\tab}True-Boolean value, result of comparison operations\par
{\pntext\f5\'B7\tab}try-To make a try...except statement\par
{\pntext\f5\'B7\tab}while-To create a while loop\par
{\pntext\f5\'B7\tab}with-Used to simplify exception handling\par
{\pntext\f5\'B7\tab}yield-To end a function, returns a generator\f3\lang9\par

\pard\sa200\sl276\slmult1\ul\b\fs32\par
\f2\fs36 6.Python Comments\fs32\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\ulnone\b0\fs26 Comments can be used to explain Python code,to make the code more readable and to prevent execution when testing code.The Python comments are not interpreted and are ignored at the time of execution.\par
{\pntext\f5\'B7\tab}Comments starts with a #, and Python will ignore them:\par

\pard\sa200\sl276\slmult1 Example\par
#This is a comment - this line is not seen in console although code has it.\par
print("Hello, World!") - this line outputs- Hello world.\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 There is no multiline comment in python . For every lines we need to comment we should use # followed by our comment in every line.\ul\b\f3\fs32\lang9\par

\pard\sa200\sl276\slmult1\f2\fs36 7.Python Variables\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\ulnone\b0\f0\fs28 Variables are containers which are used to store values\par
{\pntext\f5\'B7\tab}A variable is a name that refers to a value\lang9\par
{\pntext\f5\'B7\tab}They are defined by a variable name . To assign a value , type variable name followed by an equal to(=) sign and then its value. Not that type of variable need not be specified.\lang9\par

\pard\sa200\sl276\slmult1 Example \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 a=10\par
{\pntext\f5\'B7\tab}st="This is my home"\par
{\pntext\f5\'B7\tab}empty=True\par

\pard\sa200\sl276\slmult1\par
\ul\b\fs36 8.Python DataTypes\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\ulnone\b0\fs28 Data types are the classification or categorization of data items. It represents the kind of value that tells what operations can be performed on a particular data. Since everything is an object in Python programming, data types are actually classes and variables are instance (object) of these classes.\par

\pard\sa200\sl276\slmult1 Following are the standard or built-in data type of Python:\lang9\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Numeric\par
{\pntext\f5\'B7\tab}\f2  \f0 Sequence\f2  \f0 Type\par
{\pntext\f5\'B7\tab}Boolean\par
{\pntext\f5\'B7\tab}Set\lang9\par
{\pntext\f5\'B7\tab}\f2  \f0 Dictionary\lang9\par

\pard\sa200\sl276\slmult1 In details\par

\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1\ul\b\fs32 Numeric\fs28\par

\pard\sa200\sl276\slmult1\ulnone\b0 In Python, numeric data type represent the data which has numeric value. Numeric value can be integer, floating number or even complex numbers. These values are defined as int, float and complex class in Python.\par
\b Integers\b0  \f4\endash  This value is represented by int class. It contains positive or negative whole numbers (without fraction or decimal). In Python there is no limit to how long an integer value can be.\par
\f0\lang1033 Example \f4\lang9 a = 5  \par
    \b Float \b0\endash  This value is represented by float class. It is a real number with floating point representation. It is specified by a decimal point. Optionally, the character e or E followed by a positive or negative integer may be appended to specify scientific notation.\par

\pard\sa200\sl276\slmult1\f0\lang1033 Example \f4\lang9 b = 5.0\par

\pard\sa200\sl276\slmult1     \b Complex Numbers \b0\endash  Complex number is represented by complex class. It is specified as (real part) + (imaginary part)j. For example \endash  2+3j\par

\pard\sa200\sl276\slmult1\f0\lang1033 Example \f4\lang9 c = 2 + 4j\par

\pard\sa200\sl276\slmult1\ul\b\fs32\par
\f0\lang1033 2.Sequence Type\par

\pard\sa200\sl276\slmult1\ulnone\b0\fs28\par

\pard\sa200\sl276\slmult1 In Python, sequence is the ordered collection of similar or different data types. Sequences allows to store multiple values in an organized and efficient fashion. There are several sequence types in Python \f4\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1     String\par
{\pntext\f5\'B7\tab}    List\par
{\pntext\f5\'B7\tab}    Tuple\par

\pard\sa200\sl276\slmult1\par
\ul\b  String\b0\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\ulnone In Python, Strings are arrays of bytes representing Unicode characters. A string is a collection of one or more characters put in a single quote, double-quote or triple quote. In python there is no character data type, a character is a string of length one. It is represented by str class.\par
{\pntext\f5\'B7\tab}Strings in Python can be created using single quotes or double quotes or even triple quotes.\par

\pard\sa200\sl276\slmult1\par
String1 = 'Welcome to the Geeks World'    \par
String1 = "I'm a Geek"\par
String1 = '''I'm a Geek and I live in a world of "Geeks"'''\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 In Python, individual characters of a String can be accessed by using the method of Indexing. Indexing allows negative address references to access characters from the back of the String, e.g. -1 refers to the last character, -2 refers to the second last character and so on.    \par
{\pntext\f5\'B7\tab}\f0 Example\f4\par

\pard\sa200\sl276\slmult1 String1 = "GeeksForGeeks\f0 "\f4\par
print(String1) \par
print(String1[0]) \par
print(String1[-1]) \par
\ul\f0 Gives the following output\f4\par
\ulnone GeeksForGeeks\par
G\par
s\par
\b\par
\ul  List\ulnone\b0\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Lists are just like the arrays, declared in other languages which is a ordered collection of data. It is very flexible as the items in a list do not need to be of the same type\f0 .\f4\par
{\pntext\f5\'B7\tab}Lists in Python can be created by just placing the sequence inside the square brackets[].\par
{\pntext\f5\'B7\tab}\f0 Example1\f4\par

\pard\sa200\sl276\slmult1\par
List = [] \par
print("Initial blank List: ") \par
print(List) \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\f0 Example 2\f4\par

\pard\sa200\sl276\slmult1 List = ['GeeksForGeeks'] \par
print("\\nList with the use of String: ") \par
print(List) \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\f0 Example 3\f4\par

\pard\sa200\sl276\slmult1 List = ["Geeks", "For", "Geeks"] \par
print("\\nList containing multiple values: ") \par
print(List[0])  \par
print(List[2]) \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\f0 Example 4\f4\par

\pard\sa200\sl276\slmult1 List = [['Geeks', 'For'], ['Geeks']] \par
print(List) \par
\par
\ul\f0 Gives the following \f4 Output:\ulnone\par

\pard 
{\pntext\f4 i.\tab}{\*\pn\pnlvlbody\pnf4\pnindent0\pnstart1\pnlcrm{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 []\par
{\pntext\f4 ii.\tab}['GeeksForGeeks']\par
{\pntext\f4 iii.\tab}Geeks\par

\pard\sa200\sl276\slmult1\f0\tab\f4 Geeks\par

\pard\sa200\sl276\slmult1\f0       iv .\f4 [['Geeks', 'For'], ['Geeks']]\par

\pard\sa200\sl276\slmult1\par
In order to access the list items refer to the index number. Use the index operator [ ] to access an item in a list. In Python, negative sequence indexes represent positions from the end of the array. Instead of having to compute the offset as in List[len(List)-3], it is enough to just write List[-3]. Negative indexing means beginning from the end, -1 refers to the last item, -2 refers to the second-last item, etc.\par
List = ["Geeks", "For", "Geeks"] \par
print(List[0])  \par
print(List[2])     \par
print(List[-1]) \par
print(List[-3]) \par
\par

\pard\sa200\sl276\slmult1\ul\f0 Gives the following respective \f4 Output:\ulnone\par

\pard 
{\pntext\f4 i.\tab}{\*\pn\pnlvlbody\pnf4\pnindent0\pnstart1\pnlcrm{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 Geeks\par
{\pntext\f4 ii.\tab}Geeks\par
{\pntext\f4 iii.\tab}Geeks\par
{\pntext\f4 iv.\tab}Geek\f0 s\f4\par

\pard\sa200\sl276\slmult1  \par
\ul\b  Tuple\ulnone\b0\par
\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Just like list, tuple is also an ordered collection of Python objects. The only difference between tuple and list is that tuples are immutable i.e. tuples cannot be modified after it is created. It is represented by tuple class.\par
{\pntext\f5\'B7\tab}In Python, tuples are created by placing a sequence of values separated by \lquote comma\rquote  with or without the use of parentheses for grouping of the data sequence. Tuples can contain any number of elements and of any datatype (like strings, integers, list, etc.).\par

\pard\sa200\sl276\slmult1\ul\f0 Example\ulnone\f4\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Tuple1 = () \par

\pard\sa200\sl276\slmult1 print("Initial empty Tuple: ") \par
print (Tuple1) \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Tuple1 = ('Geeks', 'For') \par

\pard\sa200\sl276\slmult1 print(Tuple1) \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1    list1 = [1, 2, 4, 5, 6] \par

\pard\sa200\sl276\slmult1 print(tuple(list1)) \par
Tuple1 = tuple('Geeks')   \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Tuple1 = (0, 1, 2, 3) \par

\pard\sa200\sl276\slmult1 Tuple2 = ('python', 'geek') \par
Tuple3 = (Tuple1, Tuple2) \par
print(Tuple3) \par
\ul\par
\f0 Gives the following \f4 Output:\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\ulnone ()\par
{\pntext\f5\'B7\tab}('Geeks', 'For')\par
{\pntext\f5\'B7\tab}(1, 2, 4, 5, 6)\par
{\pntext\f5\'B7\tab}('G', 'e', 'e', 'k', 's')\par
{\pntext\f5\'B7\tab}((0, 1, 2, 3), ('python', 'geek'))\par

\pard\sa200\sl276\slmult1\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 In order to access the tuple items refer to the index number. Use the index operator [ ] to access an item in a tuple. The index must be an integer. Nested tuples are accessed using nested indexing.\par

\pard\sa200\sl276\slmult1\ul\f0 Example\f4   \ulnone\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 tuple1 = tuple([1, 2, 3, 4, 5])\par

\pard\sa200\sl276\slmult1  print(tuple1[0])\par
  \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 print(tuple1[-1])\par
{\pntext\f5\'B7\tab}print(tuple1[-3])\par

\pard\sa200\sl276\slmult1\par
\ul\f0 Gives the following \f4 Output:\ulnone\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 1\par
{\pntext\f5\'B7\tab}5\par
{\pntext\f5\'B7\tab}3\par

\pard\sa200\sl276\slmult1\par
\ul\b Boolean\ulnone\b0\par
\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Data type with one of the two built-in values, True or False. Boolean objects that are equal to True are truthy (true), and those equal to False are falsy (false). But non-Boolean objects can be evaluated in Boolean context as well and determined to be true or false. It is denoted by the class bool.\par
{\pntext\f5\'B7\tab}True and False with capital \lquote T\rquote  and \lquote F\rquote  are valid booleans otherwise python will throw an error.\par

\pard\sa200\sl276\slmult1\ul\f0 Example:\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\ulnone setCount=True\par
{\pntext\f5\'B7\tab}completed=False\f4\par

\pard\sa200\sl276\slmult1\par
\ul\b Set\ulnone\b0\par
\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 In Python, Set is an unordered collection of data type that is iterable, mutable and has no duplicate elements. The order of elements in a set is undefined though it may consist of various elements.\par
{\pntext\f5\'B7\tab}Sets can be created by using the built-in set() function with an iterable object or a sequence by placing the sequence inside curly braces, separated by \lquote comma\rquote . Type of elements in a set need not be the same, various mixed-up data type values can also be passed to the set.    \par

\pard\sa200\sl276\slmult1\par
\ul\f0 Example\ulnone\f4\par

\pard\sa200\sl276\slmult1\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 set1 = set() \par

\pard\sa200\sl276\slmult1 print(set1) \par
   \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 set1 = set("GeeksForGeeks") \par

\pard\sa200\sl276\slmult1 print("\\nSet with the use of String: ") \par
print(set1) \par
  \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 set1 = set(["Geeks", "For", "Geeks"]) \par

\pard\sa200\sl276\slmult1 print("\\nSet with the use of List: ") \par
print(set1) \par
\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 set1 = set([1, 2, 'Geeks', 4, 'For', 6, 'Geeks']) \par

\pard\sa200\sl276\slmult1 print("\\nSet with the use of Mixed Values") \par
print(set1) \par
\par
\ul\f0 Gives the following \f4 Output:\ulnone\par

\pard 
{\pntext\f4 i.\tab}{\*\pn\pnlvlbody\pnf4\pnindent0\pnstart1\pnlcrm{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 set()\par
{\pntext\f4 ii.\tab}\{'F', 'o', 'G', 's', 'r', 'k', 'e'\}\par
{\pntext\f4 iii.\tab}\{'Geeks', 'For'\}\par
{\pntext\f4 iv.\tab}\{1, 2, 4, 6, 'Geeks', 'For'\}\par

\pard\sa200\sl276\slmult1\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1  Set items cannot be accessed by referring to an index, since sets are unordered the items has no index. But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword.    \par

\pard\sa200\sl276\slmult1\par
\ul\f0 Example\ulnone\f4\par

\pard\sa200\sl276\slmult1\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 set1 = set(["Geeks", "For", "Geeks"]) \par

\pard\sa200\sl276\slmult1 print("\\nInitial set") \par
print(set1) \par
    \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 for i in set1: \par

\pard\sa200\sl276\slmult1  print(i, end =" ") \par
    \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 print("Geeks" in set1) \par

\pard\sa200\sl276\slmult1\par
\ul\f0 Gives the following \f4 Output:\ulnone\par

\pard 
{\pntext\f4 i.\tab}{\*\pn\pnlvlbody\pnf4\pnindent0\pnstart1\pnlcrm{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1\{'Geeks', 'For'\}\par
{\pntext\f4 ii.\tab}Geeks For \par
{\pntext\f4 iii.\tab}True\par

\pard\sa200\sl276\slmult1\par
\ul\b  Dictionary\par
\ulnone\b0\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Dictionary in Python is an unordered collection of data values, used to store data values like a map, which unlike other Data Types that hold only single value as an element, Dictionary holds key:value pair. Key-value is provided in the dictionary to make it more optimized. Each key-value pair in a Dictionary is separated by a colon :, whereas each key is separated by a \lquote comma\rquote .\par
{\pntext\f5\'B7\tab}In Python, a Dictionary can be created by placing a sequence of elements within curly \{\} braces, separated by \lquote comma\rquote . Values in a dictionary can be of any datatype and can be duplicated, whereas keys can\rquote t be repeated and must be immutable. Dictionary can also be created by the built-in function dict(). An empty dictionary can be created by just placing it to curly braces\{\}.\par

\pard\sa200\sl276\slmult1\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Dictionary keys are case sensitive, same name but different cases of Key will be treated distinctly.\par

\pard\sa200\sl276\slmult1\ul\f0 Example\ulnone\f4\par

\pard\sa200\sl276\slmult1\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Dict = \{\} \par

\pard\sa200\sl276\slmult1 print(Dict) \par
\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Dict = \{1: 'Geeks', 2: 'For', 3: 'Geeks'\} \par

\pard\sa200\sl276\slmult1 print(Dict) \par
    \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Dict = \{'Name': 'Geeks', 1: [1, 2, 3, 4]\} \par

\pard\sa200\sl276\slmult1 print(Dict) \par
    \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Dict = dict(\{1: 'Geeks', 2: 'For', 3:'Geeks'\}) \par

\pard\sa200\sl276\slmult1 print("\\nDictionary with the use of dict(): ") \par
print(Dict) \par
\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Dict = dict([(1, 'Geeks'), (2, 'For')]) \par

\pard\sa200\sl276\slmult1 print("\\nDictionary with each item as a pair: ") \par
print(Dict) \par
\par
\ul\f0 Gives the following output\ulnone\f4\par

\pard 
{\pntext\f4 i.\tab}{\*\pn\pnlvlbody\pnf4\pnindent0\pnstart1\pnlcrm{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1\{\}\par
{\pntext\f4 ii.\tab}\{1: 'Geeks', 2: 'For', 3: 'Geeks'\}\par
{\pntext\f4 iii.\tab}\{1: [1, 2, 3, 4], 'Name': 'Geeks'\}\par
{\pntext\f4 iv.\tab}\{1: 'Geeks', 2: 'For', 3: 'Geeks'\}\par
{\pntext\f4 v.\tab}\{1: 'Geeks', 2: 'For'\}\par

\pard\sa200\sl276\slmult1\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 In order to access the items of a dictionary refer to its key name. Key can be used inside square brackets. There is also a method called get() that will also help in accessing the element from a dictionary.    \par

\pard\sa200\sl276\slmult1\ul\f0 Example\ulnone\f4\par

\pard\sa200\sl276\slmult1 # Creating a Dictionary  \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Dict = \{1: 'Geeks', 'name': 'For', 3: 'Geeks'\} \par

\pard\sa200\sl276\slmult1     \par
# accessing a element using key \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 print(Dict['name']) \par

\pard\sa200\sl276\slmult1   \par
# accessing a element using get()  method \par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 print(Dict.get(3)) \par

\pard\sa200\sl276\slmult1\par
\ul\f0 Gives the following \f4 Output:\ulnone\par

\pard 
{\pntext\f4 i.\tab}{\*\pn\pnlvlbody\pnf4\pnindent0\pnstart1\pnlcrm{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 For\par
{\pntext\f4 ii.\tab}Geeks\lang9\par

\pard\sa200\sl276\slmult1\f0\par
}
 